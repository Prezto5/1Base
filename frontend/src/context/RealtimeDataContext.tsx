'use client';

import React, { createContext, useContext, useEffect, useState, ReactNode, useCallback, useMemo } from 'react';
import { useWebSocket } from '@/hooks/useWebSocket';
import { ProductVariantDetail } from '@/types';

interface WebSocketMessage {
  type: string;
  payload?: unknown;
  message?: string;
}

interface RealtimeDataContextType {
  // WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isWebSocketConnected: boolean;
  webSocketError: string | null;
  
  // Real-time –¥–∞–Ω–Ω—ã–µ
  updatedVariants: Map<number, ProductVariantDetail>;
  
  // –ú–µ—Ç–æ–¥—ã
  getUpdatedVariant: (variantId: number) => ProductVariantDetail | null;
  reconnectWebSocket: () => void;
}

const RealtimeDataContext = createContext<RealtimeDataContextType | undefined>(undefined);

interface RealtimeDataProviderProps {
  children: ReactNode;
}

export function RealtimeDataProvider({ children }: RealtimeDataProviderProps) {
  const [updatedVariants, setUpdatedVariants] = useState<Map<number, ProductVariantDetail>>(new Map());
  
  // –ü–æ–ª—É—á–∞–µ–º WebSocket URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  const getWebSocketUrl = () => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–π WS URL
    if (process.env.NEXT_PUBLIC_WS_URL) {
      console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–≤–Ω—ã–π WebSocket URL:', process.env.NEXT_PUBLIC_WS_URL);
      return process.env.NEXT_PUBLIC_WS_URL;
    }
    
    // –ï—Å–ª–∏ WS URL –Ω–µ –∑–∞–¥–∞–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ API URL
    const apiUrl = process.env.NEXT_PUBLIC_API_URL;
    if (apiUrl) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º http/https –≤ ws/wss
      const wsUrl = apiUrl.replace(/^http/, 'ws') + '/ws/updates';
      console.log('üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WebSocket URL:', wsUrl);
      return wsUrl;
    }
    
    // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback WebSocket URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    return 'ws://localhost:8000/ws/updates';
  };
  
  const wsUrl = getWebSocketUrl();
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const handleWebSocketMessage = useCallback((message: WebSocketMessage) => {
    console.log('üì• Real-time —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.type);
    switch (message.type) {
      case 'CONNECTION_ESTABLISHED':
        console.log('üéâ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        break;
        
      case 'PING':
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        console.log('üèì –ü–æ–ª—É—á–µ–Ω PING, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PONG');
        // –ë—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ WebSocket ping/pong, 
        // –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        break;
        
      case 'PRODUCT_VARIANT_UPDATE':
        if (message.payload) {
          const variant = message.payload as ProductVariantDetail;
          console.log(`üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID ${variant.id}: —Ü–µ–Ω–∞ ${variant.price}, –∫–æ–º–ø–∞–Ω–∏–π ${variant.total_companies}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
          setUpdatedVariants(prev => {
            const newMap = new Map(prev);
            newMap.set(variant.id, variant);
            return newMap;
          });
        }
        break;
        
      default:
        console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
        break;
    }
  }, []);

  const onConnect = useCallback(() => {
    console.log('‚úÖ Real-time –∫–æ–Ω—Ç–µ–∫—Å—Ç: WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
  }, []);

  const onDisconnect = useCallback(() => {
    console.log('‚ùå Real-time –∫–æ–Ω—Ç–µ–∫—Å—Ç: WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º options –æ–±—ä–µ–∫—Ç
  const websocketOptions = useMemo(() => ({
    onMessage: handleWebSocketMessage,
    onConnect,
    onDisconnect,
    reconnectAttempts: 5,
    reconnectInterval: 1000,
    enableReconnect: true,
  }), [handleWebSocketMessage, onConnect, onDisconnect]);
  
  const {
    isConnected: isWebSocketConnected,
    connectionError: webSocketError,
    lastMessage,
    reconnect: reconnectWebSocket,
  } = useWebSocket(wsUrl, websocketOptions);

  const getUpdatedVariant = (variantId: number): ProductVariantDetail | null => {
    return updatedVariants.get(variantId) || null;
  };

  useEffect(() => {
    if (lastMessage) {
      handleWebSocketMessage(lastMessage);
    }
  }, [lastMessage, handleWebSocketMessage]);

  const contextValue: RealtimeDataContextType = {
    isWebSocketConnected,
    webSocketError,
    updatedVariants,
    getUpdatedVariant,
    reconnectWebSocket,
  };

  return (
    <RealtimeDataContext.Provider value={contextValue}>
      {children}
    </RealtimeDataContext.Provider>
  );
}

export function useRealtimeData(): RealtimeDataContextType {
  const context = useContext(RealtimeDataContext);
  if (context === undefined) {
    throw new Error('useRealtimeData –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ RealtimeDataProvider');
  }
  return context;
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
export function useVariantWithRealtime(initialVariant: ProductVariantDetail): ProductVariantDetail {
  const { getUpdatedVariant } = useRealtimeData();
  const [currentVariant, setCurrentVariant] = useState<ProductVariantDetail>(initialVariant);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const updatedVariant = getUpdatedVariant(initialVariant.id);
    if (updatedVariant) {
      console.log(`üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${updatedVariant.id}: ${initialVariant.price} ‚Üí ${updatedVariant.price}`);
      setCurrentVariant(updatedVariant);
    } else {
      setCurrentVariant(initialVariant);
    }
  }, [initialVariant, getUpdatedVariant, currentVariant.price, currentVariant.total_companies]);

  return currentVariant;
} 