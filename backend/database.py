from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import NullPool
import os
import logging

logger = logging.getLogger(__name__)

DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    logger.error("‚ùå DATABASE_URL environment variable is not set!")
    raise ValueError("DATABASE_URL environment variable must be set")

logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {DATABASE_URL[:50]}...")

# Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ postgresql://, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ postgresql+asyncpg://
if DATABASE_URL.startswith("postgresql://"):
    DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://", 1)
    logger.info("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω URL –¥–ª—è asyncpg")

engine = create_async_engine(
    DATABASE_URL,
    echo=True,
    poolclass=NullPool
)

async_session = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

async def get_session():
    session = async_session()
    try:
        yield session
    finally:
        await session.close() 