"""
Database Listener –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è PostgreSQL NOTIFY —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Ö —á–µ—Ä–µ–∑ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
"""

import asyncio
import json
import logging
import os
from typing import Optional

import asyncpg
from websocket_manager import manager
import crud
from database import async_session

logger = logging.getLogger(__name__)


class DatabaseListener:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç PostgreSQL"""
    
    def __init__(self):
        self.connection: Optional[asyncpg.Connection] = None
        self.is_listening = False
        
    async def connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        database_url = os.getenv("DATABASE_URL")
        
        if not database_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞! Database Listener –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            raise Exception("DATABASE_URL environment variable is not set")
        
        logger.info(f"üîó Database Listener –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î: {database_url[:50]}...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –¥–ª—è asyncpg (—É–±–∏—Ä–∞–µ–º +asyncpg –µ—Å–ª–∏ –µ—Å—Ç—å)
        if "+asyncpg" in database_url:
            database_url = database_url.replace("+asyncpg", "")
            
        try:
            self.connection = await asyncpg.connect(database_url)
            logger.info("‚úÖ Database Listener: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ë–î
            result = await self.connection.fetchval("SELECT current_database()")
            logger.info(f"üìä Database Listener –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ë–î: {result}")
            
        except Exception as e:
            logger.error(f"‚ùå Database Listener: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    async def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            await self.connection.close()
            self.connection = None
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def handle_notification(self, notification):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç PostgreSQL"""
        try:
            # –ü–∞—Ä—Å–∏–º JSON payload
            payload = json.loads(notification.payload)
            table = payload.get('table')
            operation = payload.get('operation')
            data = payload.get('data')
            
            logger.info(f"DB notify: {table}.{operation} ID {data.get('id')}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ product_variants
            if table == 'product_variants' and operation in ['INSERT', 'UPDATE']:
                await self.handle_product_variant_change(data)
            elif table == 'products' and operation in ['INSERT', 'UPDATE']:
                await self.handle_product_change(data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def handle_product_variant_change(self, variant_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ product_variants"""
        try:
            variant_id = variant_data.get('id')
            if not variant_id:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ ID –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
                return
            
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID {variant_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ –ë–î
            async with async_session() as session:
                # –ò—â–µ–º variant –ø–æ ID –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º –∏ —Ä–µ–≥–∏–æ–Ω–æ–º
                from sqlalchemy.future import select
                from sqlalchemy.orm import joinedload
                from models import ProductVariant, Product, Region
                
                query = (
                    select(ProductVariant)
                    .options(
                        joinedload(ProductVariant.product),
                        joinedload(ProductVariant.region)
                    )
                    .where(ProductVariant.id == variant_id)
                )
                result = await session.execute(query)
                variant = result.scalars().first()
                
                if not variant:
                    logger.warning(f"–í–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID {variant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {variant.product.base_name} –≤ {variant.region.name_nominative}, —Ü–µ–Ω–∞: {variant.price}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞–º
                message = {
                    "type": "PRODUCT_VARIANT_UPDATE",
                    "payload": {
                        "id": variant.id,
                        "price": float(variant.price),
                        "total_companies": variant.total_companies,
                        "companies_with_email": variant.companies_with_email,
                        "companies_with_phone": variant.companies_with_phone,
                        "companies_with_site": variant.companies_with_site,
                        "companies_with_address": variant.companies_with_address,
                        "companies_with_activity": variant.companies_with_activity,
                        "is_active": variant.is_active,
                        "title": variant.title,
                        "description": variant.description,
                        "seo_text": variant.seo_text,
                        "product": {
                            "id": variant.product.id,
                            "base_name": variant.product.base_name,
                            "slug": variant.product.slug,
                            "image_url": variant.product.image_url,
                            "tags": variant.product.tags,
                            "is_top": variant.product.is_top,
                            "created_at": variant.product.created_at.isoformat() if variant.product.created_at else None,
                            "updated_at": variant.product.updated_at.isoformat() if variant.product.updated_at else None,
                        },
                        "region": {
                            "id": variant.region.id,
                            "name_nominative": variant.region.name_nominative,
                            "name_genitive": variant.region.name_genitive,
                            "name_prepositional": variant.region.name_prepositional,
                            "slug": variant.region.slug,
                        }
                    }
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                connection_count = manager.get_connection_count()
                logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {connection_count} –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                await manager.broadcast(message)
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID {variant_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    
    async def handle_product_change(self, product_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ products"""
        try:
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
            product_id = product_data.get('id')
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
    
    async def listen_for_notifications(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.connection:
            logger.error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è")
            return
            
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.connection.add_listener('data_updates', self.handle_notification)
            self.is_listening = True
            logger.info("–ù–∞—á–∞—Ç–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ 'data_updates'")
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            while self.is_listening:
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        finally:
            self.is_listening = False
            logger.info("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    async def stop_listening(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.is_listening = False
        if self.connection:
            await self.connection.remove_listener('data_updates', self.handle_notification)
            logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–∏—Å—Ç–µ–Ω–µ—Ä–∞
listener = DatabaseListener()


async def start_db_listener():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ë–î"""
    try:
        await listener.connect()
        await listener.listen_for_notifications()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ DB Listener: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è DB Listener...")
        await start_db_listener()


async def stop_db_listener():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ë–î"""
    await listener.stop_listening()
    await listener.disconnect() 